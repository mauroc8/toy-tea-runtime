{"version":3,"sources":["../src/private/Utils.ts","../src/private/Reconciliation.ts","../src/Runtime.ts","../src/Html.ts","index.ts"],"names":[],"mappings":";AAiDA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAhDA,SAAgB,EACZ,EACA,GAEI,EAUR,SAAgB,EAAU,EAAM,GACxB,GAAA,IAAM,EACC,OAAA,EAGP,GAAA,aAAa,OAAS,aAAa,MAC5B,OAAA,EAAE,SAAW,EAAE,QAAU,EAAE,MAAM,SAAC,EAAG,GAAM,OAAA,EAAO,EAAG,EAAE,MAG9D,GAAA,EAAS,IAAM,EAAS,GAAI,CACV,IAAA,IAAA,EAAA,EAAA,EAAA,OAAO,KAAK,GAAZ,EAAA,EAAA,OAAA,IAAgB,CAC1B,MADG,EAAG,EAAA,MACG,GAAO,EAAO,EAAE,GAAM,EAAE,KAC1B,OAAA,EAIG,IAAA,IAAA,EAAA,EAAA,EAAA,OAAO,KAAK,GAAZ,EAAA,EAAA,OAAA,IAAgB,CAAvB,IAAA,EACH,MADG,EAAG,EAAA,MACG,GACF,OAAA,EAIR,OAAA,EAKP,SAAA,OAAO,MAAM,KAAM,OAAO,MAAM,KAI7B,IAAM,EAGjB,SAAgB,EAAS,GACd,MAAa,WAAb,EAAO,IAAwB,OAAN,EADpC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,QAAA,OAAA,QAAA,oBAAA,EAhDA,QAAA,eAAA,EAcA,QAAA,OAAA,EAkCA,QAAA,SAAA;;ACwNC,aAAA,IAAA,EAAA,MAAA,KAAA,kBAAA,OAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,OAAA,eAAA,EAAA,EAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,qBAAA,OAAA,OAAA,SAAA,EAAA,GAAA,OAAA,eAAA,EAAA,UAAA,CAAA,YAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,EAAA,QAAA,IAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,YAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,MAAA,QAAA,UAAA,EAvQD,IAAA,EAAA,EAAA,QAAA,YAcA,SAAgB,EAAa,EAAsB,EAAyB,GAClE,IAAA,EAAa,EAAO,EAAM,GAEzB,OADP,EAAK,YAAY,GACV,OAAO,OAAO,CAAE,KAAM,EAAY,KAAM,IAQnD,SAAgB,EACZ,EACA,EACA,GAEI,GAAA,EAAW,OAAS,EACb,OAAA,EAGH,OAAA,EAAW,KAAK,UACf,IAAA,OACM,OAAA,EAAK,EAAW,KAAM,EAAM,GAElC,IAAA,OACO,OAAA,EAAK,UACJ,IAAA,OACM,OAAA,EAAK,EAAW,KAAM,EAAM,GACvC,QACQ,OAAA,EAAW,KAAK,UAAY,EAAK,SAAW,EAAW,gBAAgB,SACvE,EACI,EAAW,KACX,EAAW,KAAK,WAChB,EAAK,WACL,GAEJ,EACI,EAAW,KACX,EAAW,KAAK,SAChB,EAAK,SACL,GAEG,OAAO,OAAO,CAAE,KAAM,EAAM,KAAM,EAAW,QAE7C,EAAK,EAAW,KAAM,EAAM,KAM3D,SAAS,EAAY,EAAsB,GAC/B,OAAA,EAAK,UACJ,IAAA,OAGqB,IAFhB,IAAA,EAAU,SAAS,cAAc,EAAK,SAEtB,EAAA,EAAA,EAAA,EAAK,WAAL,EAAA,EAAA,OAAA,IAAe,CACjC,EADc,EAAA,GACY,EAAU,GAEtB,IAAA,IAAA,EAAA,EAAA,EAAA,EAAK,SAAL,EAAA,EAAA,OAAA,IAAa,CAAtB,IAAA,EAAK,EAAA,GACV,EAAQ,YAAY,EAAO,EAAO,IAE/B,OAAA,EAEN,IAAA,OACM,OAAA,SAAS,eAAe,EAAK,OAIhD,SAAS,EAAoB,EAAgC,EAA8B,GACnF,IACQ,OAAA,EAAU,KACT,IAAA,YAED,YADA,EAAS,aAAa,EAAU,KAAM,EAAU,OAG/C,IAAA,WAED,YADC,EAAiB,EAAU,MAAQ,EAAU,OAG7C,IAAA,eAID,YAHC,EAAiB,KAAK,EAAU,WAAe,SAAC,GAC7C,OAAA,EAAS,EAAU,QAAQ,MAI9B,IAAA,QASD,YAPI,EAAU,SAAS,WAAW,MAC7B,EAAiB,MAAM,YAAY,EAAU,SAAU,EAAU,OAEjE,EAAiB,MAAM,EAAU,UAAgC,UAApB,EAAU,MAClD,WACA,EAAU,OAInB,IAAA,QACuB,KAApB,EAAU,OACV,EAAS,UAAU,IAAI,EAAU,QAG/C,MAAO,GACL,EAAM,eAAe,iBAAkB,IAM/C,SAAS,EACL,EACA,EACA,EACA,GAEA,EACI,EACA,EACA,SAAC,EAAS,EAAS,GACV,EAAkB,EAAS,IAC5B,EAAiB,EAAS,EAAS,EAAU,IAGrD,SAAC,EAAS,GACN,EAAgB,EAAS,IAE7B,SAAC,EAAS,GACN,EAAe,EAAS,EAAU,KAM9C,SAAS,EACL,EACA,EACA,EACA,EACA,GAIK,IAFC,IAAA,EAAkB,GAEf,EAAI,EAAG,EAAI,KAAK,IAAI,EAAG,OAAQ,EAAG,QAAS,IAChD,EAAM,KAAK,EAAY,EAAG,GAAI,EAAG,GAAI,IAGpC,IAAI,EAAI,EAAG,OAAQ,EAAI,EAAG,OAAQ,IACnC,EAAM,KAAK,EAAS,EAAG,GAAI,IAG1B,IAAI,EAAI,EAAG,OAAQ,EAAI,EAAG,OAAQ,IACnC,EAAM,KAAK,EAAS,EAAG,GAAI,IAGxB,OAAA,EAGX,SAAS,EACL,EACA,EACA,EACA,GAGoB,aAAhB,EAAQ,KAAsC,aAAhB,EAAQ,KAClC,EAAQ,OAAS,EAAQ,MAQjC,EAAgB,EAAS,GACzB,EAAe,EAAS,EAAU,IARrB,EAAc,EAAQ,QAAU,EAAQ,QACxC,EAAc,EAAQ,MAAQ,EAAQ,OAUvD,SAAS,EAAqB,EAAsB,GAC5C,MAAU,cAAV,EAAE,KAAiC,cAAV,EAAE,IACpB,EAAE,OAAS,EAAE,MAAQ,EAAE,QAAU,EAAE,MACzB,aAAV,EAAE,KAAgC,aAAV,EAAE,IAC1B,EAAE,OAAS,EAAE,MAAQ,EAAM,OAAO,EAAE,MAAO,EAAE,OACnC,iBAAV,EAAE,KAAoC,iBAAV,EAAE,IAG9B,EAAE,YAAc,EAAE,WAAa,EAAE,UAAY,EAAE,QACrC,UAAV,EAAE,KAA6B,UAAV,EAAE,IACvB,EAAE,WAAa,EAAE,UAAY,EAAE,QAAU,EAAE,MACjC,UAAV,EAAE,KAA6B,UAAV,EAAE,KACvB,EAAE,QAAU,EAAE,MAM7B,SAAS,EAAmB,EAAyB,GAC7C,IACQ,OAAA,EAAK,KACJ,IAAA,YAED,YADA,EAAM,gBAAgB,EAAK,MAE1B,IAAA,WAED,YADC,EAAc,EAAK,WAAQ,GAE3B,IAAA,eAED,YADC,EAAc,KAAK,EAAK,gBAAe,GAEvC,IAAA,QAED,YADC,EAAc,MAAM,EAAK,UAAY,IAErC,IAAA,QAED,YADA,EAAM,UAAU,OAAO,EAAK,QAGtC,MAAO,GACL,EAAM,eAAe,kBAAmB,IAOhD,SAAS,EACL,EACA,EACA,EACA,GAEM,IAAA,EAAa,MAAM,KAAK,EAAO,YAErC,EACI,EACA,EACA,SAAC,EAAa,EAAS,GACb,IAAA,EAAS,EAAW,GAEtB,KAAE,aAAkB,SAAc,aAAkB,MACpD,KAAM,CAAE,OAAM,EAAE,YAAW,EAAE,QAAO,EAAE,OAAM,GAEhD,EAAM,CAAE,KAAM,EAAQ,KAAM,GAAe,EAAS,IAExD,SAAC,EAAG,GACe,EAAW,GAEnB,UAEX,SAAC,EAAS,GACN,EAAO,YAAY,EAAO,EAAS,MAtP/C,QAAA,KAAA,EAWA,QAAA,MAAA;;AC0DC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EApFD,IAAA,EAAA,QAAA,4BAkBA,SAAgB,EACZ,EACA,EACA,EACA,GAEI,IAAA,EAAU,EAAY,EAAM,EAAQ,EAAO,GAEtC,SAAA,EAAa,GACd,IACM,IAAA,EAAQ,EAAO,EAAQ,aAAc,GAG3C,EAAU,EAAc,EAAS,EAAO,EAAQ,GAClD,MAAO,GACL,QAAQ,MAAM,IAIb,SAAA,EAAc,GACnB,sBAAsB,WAAM,OAAA,EAAa,KAGtC,OAAA,EAYX,SAAS,EACL,EACA,EACA,EACA,GAEO,MAAA,CACH,aAAc,EACd,KAAK,EAAA,EAAA,MAAK,EAAO,EAAO,GAAQ,IAQxC,SAAS,EACL,EACA,EACA,EACA,GAEO,MAAA,CAEH,IAAK,EAAQ,eAAiB,EACxB,EAAQ,KACR,EAAA,EAAA,OAAM,EAAQ,IAAK,EAAO,GAAQ,GAGxC,aAAc,GAhEtB,QAAA,MAAA;;AClBA,aAMA,SAAgB,EACZ,EACA,EACA,GAEO,MAAA,CAAE,KAAM,OAAQ,SAAU,OAAQ,QAAO,EAAE,WAAU,EAAE,SAAQ,GAG1E,SAAgB,EAAU,GACf,MAAA,CAAE,KAAM,OAAQ,SAAU,OAAQ,KAAI,GAGjD,SAAgB,EAAU,EAAe,GAC7B,OAAA,EAAK,UACJ,IAAA,OACM,OAAA,EACH,EAAK,QACL,EAAK,WAAW,IAAI,SAAA,GAAQ,OAAA,EAAa,EAAM,KAC/C,EAAK,SAAS,IAAI,SAAA,GAAS,OAAA,EAAI,EAAO,MAGzC,IAAA,OACM,OAAA,GAyBnB,SAAgB,EAAa,EAAc,GAChC,MAAA,CAAE,IAAK,YAAa,KAAI,EAAE,MAAK,GAO1C,SAAgB,EAAY,EAAc,GAC/B,MAAA,CAAE,IAAK,WAAY,KAAI,EAAE,MAAK,GAUzC,SAAgB,EACZ,EACA,GAEO,MAAA,CACH,IAAK,eACL,UAAS,EACT,QAAO,GAIf,SAAgB,EAAW,EAAkB,GAClC,MAAA,CAAE,IAAK,QAAS,SAAQ,EAAE,MAAK,GAG1C,SAAgB,EAAU,GACf,MAAA,CAAE,IAAK,QAAS,MAAO,GAGlC,SAAgB,EAAmB,EAAyB,GAChD,OAAA,EAAU,KACT,IAAA,eACM,MAAA,CACH,IAAK,eACL,UAAW,EAAU,UACrB,QAAS,SAAC,GAAM,OAAA,EAAE,EAAU,QAAQ,MAE5C,QACW,OAAA,GATnB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,QAAA,OAAA,QAAA,MAAA,QAAA,GAAA,QAAA,SAAA,QAAA,UAAA,QAAA,IAAA,QAAA,KAAA,QAAA,UAAA,EArFA,QAAA,KAAA,EAQA,QAAA,KAAA,EAIA,QAAA,IAAA,EAmCA,QAAA,UAAA,EAQA,QAAA,SAAA,EAWA,QAAA,GAAA,EAWA,QAAA,MAAA,EAIA,QAAA,OAAA,EAIA,QAAA,aAAA;;ACuIC,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,EAAA,MAAA,KAAA,eAAA,SAAA,EAAA,EAAA,GAAA,GAAA,GAAA,IAAA,UAAA,OAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,KAAA,GAAA,KAAA,IAAA,IAAA,EAAA,MAAA,UAAA,MAAA,KAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,OAAA,GAAA,MAAA,UAAA,MAAA,KAAA,KAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAnOD,IAAA,EAAA,QAAA,kBAEA,EAAA,QAAA,eAEA,SAAS,EAAO,GACR,MAAA,EAGR,IAAM,GAAW,EAAA,EAAA,OACf,SAAS,cAAc,UAAY,EAAO,iBAC1C,IACA,EACA,GAgBF,SAAS,EAAK,EAAY,GACjB,MAAA,CAAE,GAAE,EAAE,YAAW,EAAE,MAAM,GAGlC,SAAS,IACA,MAAA,CACL,aAAc,GACd,MAAO,IAaX,SAAS,EAAO,EAAc,GACpB,OAAA,EAAO,KACR,IAAA,iBACH,OAAA,EAAA,EAAA,GAAY,GAAK,CAAE,aAAc,EAAO,QACrC,IAAA,aACG,IAAA,GAAM,IAAI,MAAQ,qBACxB,OAAA,EAAA,EAAA,GACK,GAAK,CACR,aAAc,GACd,MAAK,EAAA,CAAG,EAAK,EAAI,EAAO,cAAiB,EAAM,OAAK,KAEnD,IAAA,mBACH,OAAA,EAAA,EAAA,GAAY,GAAK,CAAE,MAAO,EAAiB,EAAO,GAAI,EAAM,SACzD,IAAA,sBACH,OAAA,EAAA,EAAA,GAAY,GAAK,CAAE,MAAO,EAAoB,EAAO,GAAI,EAAO,YAAa,EAAM,SAChF,IAAA,aACH,OAAA,EAAA,EAAA,GAAY,GAAK,CAAE,MAAO,EAAM,MAAM,OAAO,SAAA,GAAQ,OAAA,EAAK,KAAO,EAAO,QAI9E,SAAS,EAAiB,EAAY,GAC7B,OAAA,EAAM,IAAI,SAAA,GACf,OAAA,EAAK,KAAO,EACT,EAAA,EAAA,GAAM,GAAI,CAAE,MAAO,EAAK,OACvB,IAIR,SAAS,EAAoB,EAAY,EAAqB,GACrD,OAAA,EAAM,IAAI,SAAA,GACf,OAAA,EAAK,KAAO,EACT,EAAA,EAAA,GAAM,GAAI,CAAE,YAAW,IACtB,IAMR,SAAS,EAAK,GACL,OAAA,EAAA,EAAA,MACL,MACA,EACE,EAAA,EAAA,OAAM,cAAe,eACrB,EAAA,EAAA,OAAM,YAAa,UACnB,EAAA,EAAA,OAAM,SAAU,cAElB,EACE,EAAA,EAAA,MAAK,KAAM,GAAI,EAAC,EAAA,EAAA,MAAK,iBACrB,EAAA,EAAA,MAAK,IAAK,GAAI,EAAC,EAAA,EAAA,MAAK,IAAK,GAAI,EAAC,EAAA,EAAA,MAAK,+BACnC,EAAiB,EAAM,cACvB,EAAU,EAAM,SAKtB,SAAS,EAAiB,GACjB,OAAA,EACL,GACA,CACE,EAAoB,CAClB,GAAI,eACJ,OAAO,EAAA,EAAA,MAAK,uBACZ,WAAY,EACZ,SAAU,SAAA,GAAU,MAAA,CAAE,IAAK,iBAAkB,MAAK,MAEpD,EACE,CAAE,IAAK,aAAc,YAAa,GAClC,GACA,EAAC,EAAA,EAAA,MAAK,cAMd,SAAS,EAAU,GACV,OAAA,EAAA,EAAA,MACL,MACA,GACA,EAAM,IAAI,IAId,SAAS,EAAS,GACT,OAAA,EACL,EACE,EAAA,EAAA,OAAM,SAAU,WAChB,EAAA,EAAA,OAAM,MAAO,SACb,EAAA,EAAA,OAAM,cAAe,aAEvB,CACE,EAAe,EAAK,GAAI,EAAK,MAC7B,EAAiB,GACjB,EAAK,KAAO,EAAa,EAAK,KAAM,EAAA,EAAA,MAAK,MAK/C,SAAS,EAAe,EAAY,GAC3B,OAAA,EAAA,EAAA,MACL,QACA,EACE,EAAA,EAAA,UAAS,OAAQ,aACjB,EAAA,EAAA,IAAG,SAAU,SAAA,GAAM,MAAA,CAAE,IAAK,mBAAoB,GAAE,MAChD,EAAA,EAAA,WAAU,aAAc,YACxB,EAAA,EAAA,UAAS,UAAW,IAEtB,IAIJ,SAAS,EAAiB,GACjB,OAAA,EAAK,MACR,EAAA,EAAA,MACA,MACA,EAAC,EAAA,EAAA,OAAM,kBAAmB,iBAC1B,EAAC,EAAA,EAAA,MAAK,EAAK,eAEX,EAAoB,CACpB,GAAI,QAAQ,EAAK,GAAE,eACnB,OAAO,EAAA,EAAA,MAAK,MAAO,EAAC,EAAA,EAAA,OAAM,UAAW,SAAU,EAAC,EAAA,EAAA,MAAK,6BACrD,WAAY,EAAK,YACjB,SAAU,SAAA,GAAU,MAAA,CAAE,IAAK,sBAAuB,GAAI,EAAK,GAAI,YAAa,MAIlF,SAAS,EAAa,GACb,OAAA,EACL,CAAE,IAAK,aAAc,GAAE,GACvB,GACA,EAAC,EAAA,EAAA,MAAK,YAOV,SAAS,EAAgB,EAA4B,GAC5C,OAAA,EAAA,EAAA,MAAK,MAAK,EAAA,EAAG,EAAA,EAAA,OAAM,UAAW,SAAS,EAAA,EAAA,OAAM,iBAAkB,QAAW,GAAK,GAAG,GAG3F,SAAS,EACP,EACA,EACA,GAEO,OAAA,EAAA,EAAA,MAAK,SAAQ,EAAA,EAAG,EAAA,EAAA,IAAG,QAAS,SAAA,GAAK,OAAA,KAAa,GAAK,GAAG,GAG/D,SAAS,EACP,GAUO,OAAA,EAAA,EAAA,MACL,QAAO,EAAA,EAEL,EAAA,EAAA,UAAS,KAAM,EAAK,KAChB,EAAK,iBAAmB,IAAG,GAEjC,CACE,EAAK,OACL,EAAA,EAAA,MACE,QAAO,EAAA,EAEL,EAAA,EAAA,UAAS,OAAQ,EAAK,MAAQ,SAC9B,EAAA,EAAA,UAAS,QAAS,EAAK,aACvB,EAAA,EAAA,IAAG,SAAU,SAAA,GAAO,OAAA,EAAK,SAAU,EAAI,OAAe,UAClD,EAAK,iBAAmB,IAAG,GAEjC","file":"example.dec1ac52.js","sourceRoot":"../example","sourcesContent":["\nexport function debugException<A>(\n    message: string,\n    error: unknown\n): undefined {\n    if (process.env.NODE_ENV === 'development') {\n        console.info(`[Runtime exception] ${message}:`)\n        console.error(error)\n    }\n\n    return undefined\n}\n\n\n/** Structural equality */\nexport function equals<A>(a: A, b: A): boolean {\n    if (a === b) {\n        return true\n    }\n\n    if (a instanceof Array && b instanceof Array) {\n        return a.length === b.length && a.every((x, i) => equals(x, b[i]))\n    }\n\n    if (isObject(a) && isObject(b)) {\n        for (const key of Object.keys(a)) {\n            if (!(key in b) || !equals(a[key], b[key])) {\n                return false\n            }\n        }\n\n        for (const key of Object.keys(b)) {\n            if (!(key in a)) {\n                return false\n            }\n        }\n\n        return true\n    }\n\n    // NaN values are not equal between themselves or each other.\n    // Without this, `equals(NaN, NaN)` would return `false`.\n    if (Number.isNaN(a) && Number.isNaN(b)) {\n        return true;\n    }\n\n    return a === b\n}\n\nexport function isObject(a: unknown): a is { [key: string]: unknown } {\n    return typeof a === 'object' && a !== null\n}\n","import * as Html from '../Html'\n\nimport * as Utils from './Utils'\n\n/** An inmutable HTML virtual node reconciled with a mutable DOM element.\n*/\nexport type Reconciled<Action> = {\n    html: Html.Html<Action>,\n    node: Element | Text,\n}\n\n/** This is how to initialize the virtual DOM loop. It basically ignores the content of the DOM\n * and just replaces the `node` with new DOM nodes.\n * \n * The `actionCallback` is the function that will be called when an event handler receives an Action.\n*/\nexport function init<Action>(node: Element | Text, html: Html.Html<Action>, actionCallback: (event: Action) => void): Reconciled<Action> {\n    const newDomNode = render(html, actionCallback)\n    node.replaceWith(newDomNode)\n    return Object.freeze({ node: newDomNode, html: html })\n}\n\n/** Does the diffing and reconciliation algorithm. It sets a `Reconciled`'s html\n * also applying the DOM mutations necesary to keep them in sync.\n *\n * Not optimized at all.\n*/\nexport function patch<E>(\n    virtualDom: Reconciled<E>,\n    html: Html.Html<E>,\n    actionCallback: (event: E) => void\n): Reconciled<E> {\n    if (virtualDom.html === html) {\n        return virtualDom\n    }\n\n    switch (virtualDom.html.nodeType) {\n        case 'text':\n            return init(virtualDom.node, html, actionCallback)\n\n        case 'node':\n            switch (html.nodeType) {\n                case 'text':\n                    return init(virtualDom.node, html, actionCallback)\n                default:\n                    if (virtualDom.html.tagName === html.tagName && virtualDom.node instanceof Element) {\n                        patchAttributes(\n                            virtualDom.node,\n                            virtualDom.html.attributes,\n                            html.attributes,\n                            actionCallback\n                        )\n                        patchChildren(\n                            virtualDom.node,\n                            virtualDom.html.children,\n                            html.children,\n                            actionCallback\n                        )\n                        return Object.freeze({ html: html, node: virtualDom.node })\n                    } else {\n                        return init(virtualDom.node, html, actionCallback)\n                    }\n            }\n    }\n}\n\nfunction render<Evt>(html: Html.Html<Evt>, dispatch: (evt: Evt) => void): Element | Text {\n    switch (html.nodeType) {\n        case 'node':\n            const element = document.createElement(html.tagName)\n\n            for (let attribute of html.attributes)\n                applyAttribute(attribute, dispatch, element)\n\n            for (let child of html.children)\n                element.appendChild(render(child, dispatch))\n\n            return element\n\n        case 'text':\n            return document.createTextNode(html.text)\n    }\n}\n\nfunction applyAttribute<Evt>(attribute: Html.Attribute<Evt>, dispatch: (evt: Evt) => void, $element: Element): void {\n    try {\n        switch (attribute.tag) {\n            case 'attribute':\n                $element.setAttribute(attribute.name, attribute.value)\n                return\n    \n            case 'property':\n                ($element as any)[attribute.name] = attribute.value\n                return\n    \n            case 'eventHandler':\n                ($element as any)[`on${attribute.eventName}`] = (event: Event) =>\n                    dispatch(attribute.handler(event))\n    \n                return\n    \n            case 'style':\n                // https://github.com/facebook/react/blob/87239321b0609f7bf1edaaba6aab6be24d6717b1/packages/react-dom/src/client/CSSPropertyOperations.js#L59\n                if (attribute.property.startsWith('--')) {\n                    ($element as any).style.setProperty(attribute.property, attribute.value)\n                } else {\n                    ($element as any).style[attribute.property] = attribute.value === 'float'\n                        ? 'cssFloat'\n                        : attribute.value\n                }\n                return\n    \n            case 'class':\n                if (attribute.value !== '') {\n                    $element.classList.add(attribute.value)\n                }\n        }\n    } catch (e) {\n        Utils.debugException('applyAttribute', e)\n    }\n}\n\n// --- Attributes\n\nfunction patchAttributes<T>(\n    domNode: Element,\n    currentAttributes: Array<Html.Attribute<T>>,\n    newAttributes: Array<Html.Attribute<T>>,\n    dispatch: (event: T) => void,\n): void {\n    mergeArraysComparingElements(\n        currentAttributes,\n        newAttributes,\n        (oldAttr, newAttr, _) => {\n            if (!attributeEquality(oldAttr, newAttr)) {\n                replaceAttribute(oldAttr, newAttr, dispatch, domNode)\n            }\n        },\n        (oldAttr, _) => {\n            removeAttribute(oldAttr, domNode)\n        },\n        (newAttr, _) => {\n            applyAttribute(newAttr, dispatch, domNode)\n        }\n    )\n}\n\n/** Helper function. It \"zips\" or \"maps\" two arrays into one. */\nfunction mergeArraysComparingElements<A, B>(\n    xs: Array<A>,\n    ys: Array<A>,\n    bothPresent: (x: A, y: A, index: number) => B,\n    xPresent: (x: A, index: number) => B,\n    yPresent: (y: A, index: number) => B\n): Array<B> {\n    const array: Array<B> = []\n\n    for (let i = 0; i < Math.min(xs.length, ys.length); i++) {\n        array.push(bothPresent(xs[i], ys[i], i))\n    }\n\n    for (let i = ys.length; i < xs.length; i++) {\n        array.push(xPresent(xs[i], i))\n    }\n\n    for (let i = xs.length; i < ys.length; i++) {\n        array.push(yPresent(ys[i], i))\n    }\n\n    return array\n}\n\nfunction replaceAttribute<A>(\n    oldAttr: Html.Attribute<A>,\n    newAttr: Html.Attribute<A>,\n    dispatch: (event: A) => void,\n    $node: Element\n) {\n    /** Handle this special case for input.value and similar. */\n    if (oldAttr.tag === 'property' && newAttr.tag === 'property') {\n        if (oldAttr.name === newAttr.name) {\n            if (($node as any)[newAttr.name] !== newAttr.value) {\n                ($node as any)[newAttr.name] = newAttr.value;\n            }\n            return\n        }\n    }\n\n    removeAttribute(oldAttr, $node)\n    applyAttribute(newAttr, dispatch, $node)\n}\n\nfunction attributeEquality<T>(a: Html.Attribute<T>, b: Html.Attribute<T>): boolean {\n    if (a.tag === 'attribute' && b.tag === 'attribute') {\n        return a.name === b.name && a.value === b.value\n    } else if (a.tag === 'property' && b.tag === 'property') {\n        return a.name === b.name && Utils.equals(a.value, b.value)\n    } else if (a.tag === 'eventHandler' && b.tag === 'eventHandler') {\n        // The function comparison will most likely always return false\n        // a smarter implementation could optimize this case somehow ?\n        return a.eventName === b.eventName && a.handler === b.handler\n    } else if (a.tag === 'style' && b.tag === 'style') {\n        return a.property === b.property && a.value === b.value\n    } else if (a.tag === 'class' && b.tag === 'class') {\n        return a.value === b.value\n    }\n\n    return false\n}\n\nfunction removeAttribute<T>(attr: Html.Attribute<T>, $node: Element): void {\n    try {\n        switch (attr.tag) {\n            case 'attribute':\n                $node.removeAttribute(attr.name)\n                return\n            case 'property':\n                ($node as any)[attr.name] = undefined\n                return\n            case 'eventHandler':\n                ($node as any)[`on${attr.eventName}`] = undefined\n                return\n            case 'style':\n                ($node as any).style[attr.property] = ''\n                return\n            case 'class':\n                $node.classList.remove(attr.value)\n                return\n        }\n    } catch (e) {\n        Utils.debugException('removeAttribute', e)\n    }\n}\n\n\n// --- CHILDREN\n\nfunction patchChildren<T>(\n    parent: Element,\n    currentChildren: Array<Html.Html<T>>,\n    newChildren: Array<Html.Html<T>>,\n    dispatch: (event: T) => void,\n): void {\n    const childNodes = Array.from(parent.childNodes)\n\n    mergeArraysComparingElements(\n        currentChildren,\n        newChildren,\n        (currentHtml, newHtml, i) => {\n            const $child = childNodes[i]\n\n            if (!($child instanceof Element) && !($child instanceof Text))\n                throw { parent, currentHtml, newHtml, $child }\n\n            patch({ node: $child, html: currentHtml }, newHtml, dispatch)\n        },\n        (_, i) => {\n            const $child = childNodes[i]\n\n            $child.remove()\n        },\n        (newHtml, _) => {\n            parent.appendChild(render(newHtml, dispatch))\n        }\n    )\n}\n","import { Html } from \"./Html\"\nimport { Reconciled, patch, init } from \"./private/Reconciliation\"\n\n/** Implements a simple [TEA runtime](https://guide.elm-lang.org/architecture/).\n * \n * The Elm Architecture was popularized by redux. I try to use the same terminology that redux uses\n * except I use `update` instead of `mainReducer` to name my update function.\n * \n * This function hooks up the runtime. It receives three \"callbacks\":\n * \n * - The `init` is just the initial state. It is only used once.\n * - The `render` is the function that, given a `state`, creates the virtual HTML nodes that describe the desired HTML.\n *   These virtual HTML nodes have event listeners that feed the `update` function with actions.\n * - The `update` is the function that, given the current `state` and an `action` (typically, a result of user interaction),\n *   returns the *new* state. This should return a new copy of `state`.\n * \n * The function returns a `dispatch` callback: a function that asynchronously feeds the `update` with a new action.\n * This is necesary as a callback in network requests, for example.\n*/\nexport function start<State, Action>(\n    $root: Element,\n    init: State,\n    render: (state: State) => Html<Action>,\n    update: (state: State, action: Action) => State,\n): (action: Action) => void {\n    let runtime = initRuntime(init, render, $root, dispatchAsync)\n\n    function dispatchSync(action: Action) {\n        try {\n            const state = update(runtime.currentState, action)\n\n            /** Update DOM and currentState */\n            runtime = updateRuntime(runtime, state, render, dispatchSync)\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n    function dispatchAsync(action: Action) {\n        requestAnimationFrame(() => dispatchSync(action))\n    }\n\n    return dispatchAsync;\n}\n\n/** The state the runtime needs. */\ntype Runtime<State, Action> = {\n    currentState: State,\n    dom: Reconciled<Action>,\n}\n\n/** Initializes a TEA runtime.\n * (Performs DOM mutations.)\n */\nfunction initRuntime<State, Action>(\n    state: State,\n    render: (state: State) => Html<Action>,\n    $root: Element,\n    dispatch: (event: Action) => void,\n): Runtime<State, Action> {\n    return {\n        currentState: state,\n        dom: init($root, render(state), dispatch),\n    }\n}\n\n/** Update the state of the runtime (performing DOM mutations).\n * \n * Returns a new runtime with the updated states.\n*/\nfunction updateRuntime<State, Action>(\n    runtime: Runtime<State, Action>,\n    state: State,\n    render: (state: State) => Html<Action>,\n    dispatch: (event: Action) => void,\n): Runtime<State, Action> {\n    return {\n        /* Patch virtual and real DOM */\n        dom: runtime.currentState === state\n            ? runtime.dom\n            : patch(runtime.dom, render(state), dispatch),\n        \n        /* Update state */\n        currentState: state,\n    }\n}\n","\n// --- Html\n\nexport type Html<Event> =\n    | { type: 'Html', nodeType: 'node', tagName: string, attributes: Array<Attribute<Event>>, children: Array<Html<Event>> }\n    | { type: 'Html', nodeType: 'text', text: string }\n\nexport function node<E>(\n    tagName: string,\n    attributes: Array<Attribute<E>>,\n    children: Array<Html<E>>\n): Html<E> {\n    return { type: 'Html', nodeType: 'node', tagName, attributes, children }\n}\n\nexport function text<Evt>(text: string): Html<Evt> {\n    return { type: 'Html', nodeType: 'text', text }\n}\n\nexport function map<A, B>(html: Html<A>, f: (a: A) => B): Html<B> {\n    switch (html.nodeType) {\n        case 'node':\n            return node(\n                html.tagName,\n                html.attributes.map(attr => mapAttribute(attr, f)),\n                html.children.map(child => map(child, f))\n            )\n\n        case 'text':\n            return html\n    }\n}\n\n// --- Attribute\n\nexport type Attribute<E> =\n    | { tag: 'attribute', name: string, value: string }\n    | { tag: 'property', name: string, value: unknown }\n    | { tag: 'eventHandler', eventName: string, handler: (event: Event) => E }\n    | { tag: 'style', property: string, value: string }\n    | { tag: 'class', value: string }\n\nexport type Json =\n    | string\n    | boolean\n    | number\n    | null\n    | Json[]\n    | { [key: string]: Json | undefined }\n\n/** An attribute is set via the `setAttribute`/`removeAttribute` API.\n * \n * See https://github.com/elm/html/blob/master/properties-vs-attributes.md\n*/\nexport function attribute<E>(name: string, value: string): Attribute<E> {\n    return { tag: 'attribute', name, value }\n}\n\n/** A property is set via `$[name]`. For example, `property('value', x)` translates into the DOM mutation `$el.value = x`.\n *\n * See https://github.com/elm/html/blob/master/properties-vs-attributes.md\n */\nexport function property<E>(name: string, value: unknown): Attribute<E> {\n    return { tag: 'property', name, value }\n}\n\n/** Register an event listener.\n * \n * This translates to calling `$el.onclick = ...` if `eventName` is `\"click\"`.\n * \n * **Note:** More specific versions of this function that parse specific events (MouseEvent, InputEvent)\n * would be convenient.\n */\nexport function on<E>(\n    eventName: string,\n    handler: (event: Event) => E,\n): Attribute<E> {\n    return {\n        tag: 'eventHandler',\n        eventName,\n        handler,\n    }\n}\n\nexport function style<Evt>(property: string, value: string): Attribute<Evt> {\n    return { tag: 'style', property, value }\n}\n\nexport function class_<A>(className: string): Attribute<A> {\n    return { tag: 'class', value: className }\n}\n\nexport function mapAttribute<A, B>(attribute: Attribute<A>, f: (a: A) => B): Attribute<B> {\n    switch (attribute.tag) {\n        case 'eventHandler':\n            return {\n                tag: 'eventHandler',\n                eventName: attribute.eventName,\n                handler: (a) => f(attribute.handler(a)),\n            }\n        default:\n            return attribute\n    }\n}\n","import { start } from '../src/Runtime'\n\nimport { Html, node, text, property, attribute, style, Attribute, on } from '../src/Html'\n\nfunction $throw(x: any): never {\n  throw x\n}\n\nconst dispatch = start(\n  document.querySelector(\"#root\") || $throw(\"No #root node\"),\n  init(),\n  view,\n  update,\n)\n\n// --- STATE\n\ntype State = {\n  newTaskInput: string,\n  tasks: Task[]\n}\n\ntype Task = {\n  id: number,\n  description: string,\n  done: boolean,\n}\n\nfunction task(id: number, description: string): Task {\n  return { id, description, done: false }\n}\n\nfunction init(): State {\n  return {\n    newTaskInput: '',\n    tasks: [],\n  }\n}\n\n// --- UPDATE\n\ntype Action =\n  | { tag: \"onNewTaskInput\", value: string }\n  | { tag: \"createTask\", description: string }\n  | { tag: \"toggleTaskStatus\", id: number }\n  | { tag: \"editTaskDescription\", id: number, description: string }\n  | { tag: \"deleteTask\", id: number }\n\nfunction update(state: State, action: Action): State {\n  switch (action.tag) {\n    case \"onNewTaskInput\":\n      return { ...state, newTaskInput: action.value }\n    case \"createTask\":\n      const id = (new Date()).getUTCMilliseconds()\n      return {\n        ...state,\n        newTaskInput: '',\n        tasks: [task(id, action.description), ...state.tasks]\n      }\n    case \"toggleTaskStatus\":\n      return { ...state, tasks: toggleTaskStatus(action.id, state.tasks) }\n    case \"editTaskDescription\":\n      return { ...state, tasks: editTaskDescription(action.id, action.description, state.tasks) }\n    case \"deleteTask\":\n      return { ...state, tasks: state.tasks.filter(task => task.id !== action.id) }\n  }\n}\n\nfunction toggleTaskStatus(id: number, tasks: Task[]): Task[] {\n  return tasks.map(task =>\n    task.id === id\n      ? { ...task, done: !task.done }\n      : task\n  )\n}\n\nfunction editTaskDescription(id: number, description: string, tasks: Task[]): Task[] {\n  return tasks.map(task =>\n    task.id === id\n      ? { ...task, description }\n      : task\n  )\n}\n\n// --- VIEW\n\nfunction view(state: State): Html<Action> {\n  return node(\n    'div',\n    [\n      style('font-family', 'sans-serif'),\n      style('max-width', '800px'),\n      style('margin', '20px auto'),\n    ],\n    [\n      node('h1', [], [text('To Do List')]),\n      node('p', [], [node('i', [], [text('Toy Virtual DOM example')])]),\n      viewNewTaskInput(state.newTaskInput),\n      viewTasks(state.tasks),\n    ]\n  )\n}\n\nfunction viewNewTaskInput(newTaskInput: string): Html<Action> {\n  return flexRow(\n    [],\n    [\n      inputWithLabelAbove({\n        id: 'newTaskInput',\n        label: text('Create a new task: '),\n        inputValue: newTaskInput,\n        onChange: value => ({ tag: 'onNewTaskInput', value })\n      }),\n      button(\n        { tag: 'createTask', description: newTaskInput },\n        [],\n        [text('Create')]\n      )\n    ]\n  )\n}\n\nfunction viewTasks(tasks: Task[]): Html<Action> {\n  return node(\n    'div',\n    [],\n    tasks.map(viewTask),\n  )\n}\n\nfunction viewTask(task: Task): Html<Action> {\n  return flexRow(\n    [\n      style('margin', '10px 0'),\n      style('gap', '10px'),\n      style('align-items', 'baseline')\n    ],\n    [\n      statusCheckbox(task.id, task.done),\n      descriptionInput(task),\n      task.done ? deleteButton(task.id) : text(''),\n    ]\n  )\n}\n\nfunction statusCheckbox(id: number, done: boolean): Html<Action> {\n  return node(\n    'input',\n    [\n      property('type', 'checkbox'),\n      on('change', _ => ({ tag: \"toggleTaskStatus\", id })),\n      attribute('aria-label', 'Is done'),\n      property('checked', done),\n    ],\n    []\n  )\n}\n\nfunction descriptionInput(task: Task): Html<Action> {\n  return task.done\n    ? node(\n      'div',\n      [style('text-decoration', 'line-through')],\n      [text(task.description)]\n    )\n    : inputWithLabelAbove({\n      id: `task_${task.id}_description`,\n      label: node('div', [style('display', 'none')], [text('Change task description')]),\n      inputValue: task.description,\n      onChange: value => ({ tag: 'editTaskDescription', id: task.id, description: value })\n  })\n}\n\nfunction deleteButton(id: number): Html<Action> {\n  return button(\n    { tag: 'deleteTask', id },\n    [],\n    [text('Delete')]\n  )\n}\n\n\n// --- HELPERS\n\nfunction flexRow<Action>(attrs: Attribute<Action>[], children: Html<Action>[]): Html<Action> {\n  return node('div', [style('display', 'flex'), style('flex-direction', 'row'), ...attrs], children)\n}\n\nfunction button<Action>(\n  onClick: Action,\n  attrs: Attribute<Action>[],\n  children: Html<Action>[],\n): Html<Action> {\n  return node('button', [on('click', _ => onClick), ...attrs], children)\n}\n\nfunction inputWithLabelAbove<Action>(\n  args: {\n    type?: string,\n    id: string,\n    labelAttributes?: Attribute<Action>[],\n    label: Html<Action>,\n    inputAttributes?: Attribute<Action>[],\n    inputValue: string,\n    onChange: (value: string) => Action,\n  }\n): Html<Action> {\n  return node(\n    'label',\n    [\n      property('id', args.id),\n      ...(args.labelAttributes || []),\n    ],\n    [\n      args.label,\n      node(\n        'input',\n        [\n          property('type', args.type || 'text'),\n          property('value', args.inputValue),\n          on('change', evt => args.onChange((evt.target as any).value)),\n          ...(args.inputAttributes || []),\n        ],\n        []\n      )\n    ]\n  )\n}\n"]}